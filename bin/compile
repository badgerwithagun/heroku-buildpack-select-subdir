#!/usr/bin/env bash

set -e
echo $HEROKU_APP_NAME
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BUILDPACK=$(cat $ENV_DIR/BUILDPACK)

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

write_profile() {
  local root_dir="$1"
  # This assumes that Heroku initially looks for profiles at the $HOME folder, which it does
  mkdir -p $root_dir/.profile.d

  # Set the home directory to be the subdir and source all profiles that
  # were placed here by the invoked buildpack
  echo "export HOME=$HOME && source $HOME/.profile.d/*" > $root_dir/.profile.d/heroku-subdir-init.sh
}


# Looks for a buildpack argument with the format
# subdir=https://github.com/my/buildpack.git
execute_buildpack_at_subdir() {
  local buildpack="$1"
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  echo "BUILD_DIR: $BUILD_DIR"

  subdir=""
  if [[ $buildpack == *'='* ]]; then
    subdir=$(echo $buildpack | cut -d"=" -f 1)
    BUILDPACK=$(echo $buildpack | cut -d"=" -f 2)
  fi

  url=${BUILDPACK%#*}
  branch=${BUILDPACK#*#}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then

    echo 'Cleaning parent folder'
    mv -v $BUILD_DIR/$subdir /tmp/$subdir
    rm -rvf $BUILD_DIR/*
    mv -v /tmp/$subdir/* $BUILD_DIR/

    echo "=====> Downloading Buildpack: $url, branch: $branch, to tmp dir $dir"

    if [[ "$url" =~ \.tgz$ ]] || [[ "$url" =~ \.tgz\? ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone $url $dir >/dev/null 2>&1
      if [ -f "$dir/.gitmodules" ]; then
        echo "=====> Detected git submodules. Initializing..."
        (cd $dir && git submodule update --init --recursive)
      fi
    fi
    cd $dir

    if [ "$branch" != "" ]; then
      echo "Checking out $branch"
      git checkout $branch >/dev/null 2>&1
    fi

    # Ensure that these files exist.
    echo "Setting permissions on $dir"
    chmod -f +x $dir/bin/{detect,compile,release} || true
    echo "Permissions set"

    echo "Running $dir/bin/detect against $BUILD_DIR"
    framework=$($dir/bin/detect $BUILD_DIR)

    if [ $? == 0 ]; then
      echo "=====> Detected Framework: $framework"
      # echo "-----> Compiling with BUILD_DIR: $1"
      # echo "-----> Ls BUILD_DIR: $(ls -la $1)"
      # echo "-----> Ls \$3: $(ls -la $3)"
      # echo "-----> Ls \$2: $(ls -la $2)"
      # bin/compile BUILD_DIR CACHE_DIR ENV_DIR
      $dir/bin/compile $BUILD_DIR $CACHE_DIR $ENV_DIR

      if [ $? != 0 ]; then
        exit 1
      fi

      # check if the buildpack left behind an environment for subsequent ones
      if [ -e $dir/export ]; then
        source $dir/export
      fi

      if [ -x $dir/bin/release ]; then
        $dir/bin/release $BUILD_DIR > $BUILD_DIR/last_pack_release.out
      fi

        # Writes the profile file which initializes paths and sources
        # other profile files
	     echo 'Creating .profile.d...'
       write_profile "$BUILD_DIR"
    else
      echo "Couldn't detect any framework for this buildpack. Exiting."
      exit 1
    fi
  fi
}

# BUILDPACK should be set as a Heroku config var
execute_buildpack_at_subdir "$BUILDPACK"

if [[ -e $BUILD_DIR/last_pack_release.out ]]; then
  echo "Using release configuration from last framework ($framework)."
fi
